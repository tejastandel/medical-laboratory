apply plugin: 'java'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
version="2.0"

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
    ext.mainClass = 'com.xfinity.view.Window'
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
}

dependencies {
    compile name: 'jcalendar-0.8.1'
    compile name: 'jdatepicker-1.3.4'
    compile "org.mariadb.jdbc:mariadb-java-client:2.1.0"
    compile "net.sf.jasperreports:jasperreports:6.4.1"
    compile "net.sf.jasperreports:jasperreports-fonts:6.0.0"
    compile "com.lowagie:itext:4.2.2"
    compile "org.olap4j:olap4j:1.2.0"
    compile "org.jdatepicker:jdatepicker:1.3.4"
    compile "org.codehaus.griffon.plugins:griffon-lookandfeel-seaglass:2.0.0"

    // You can read more about how to add dependency here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:how_to_declare_your_dependencies
    testCompile group: 'junit', name: 'junit', version: '4.10'

}

task extractDependancies(type: Copy) {
    def output = new File("output")
    if(output.exists() || output.mkdirs()){
        from configurations.runtime
        into "output/libs"   
    }
}

task deployJar(type: Copy) {
    def output = new File("output")
    if(output.exists() || output.mkdirs()){
        from jar 
        into "output"
    }
} 

task copyReports(type: Copy) {
    def output = new File("output")
    if(output.exists() || output.mkdirs()){
        from "."
        into "output"
        include "reports/*.jrxml"
        include "application-properties.conf"
	include "icon.png"
    }
}

task cleanOutput(type:Delete){
    def output = new File("output")
    if(output.exists()){
        delete 'output'
    }
}

task publish(dependsOn: [clean, cleanOutput, deployJar, extractDependancies, copyReports])
